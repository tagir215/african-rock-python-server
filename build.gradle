plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
	id "com.github.node-gradle.node" version "3.1.1"
}


group = 'com.tiger' 
version = '0.0.1-SNAPSHOT'

ext.seleniumVersion = "3.141.59"
ext.javaxMailVersion = "1.6.2"
ext.jjwtVersion = "0.11.5"
ext.jjwtImplVersion = "0.11.5"
ext.jjwtJacksonVersion = "0.11.5"


java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.seleniumhq.selenium:selenium-java:${seleniumVersion}"
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation "com.sun.mail:javax.mail:${javaxMailVersion}"
	implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
	runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtImplVersion}"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtJacksonVersion}"
	implementation 'org.hibernate.validator:hibernate-validator'
	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	
}


springBoot{
	mainClass = 'com.tiger.designPatterns200.DesignPatterns200Application'
}

tasks.named('test') {
	useJUnitPlatform()
}


node {
    version = '12.16.3'
 
    npmVersion = '6.14.4'
 
    download = false

    workDir = file("${project.buildDir}/src/main/arp-client")
 
    npmWorkDir = file("${project.buildDir}/src/main/arp-client")
 
    nodeModulesDir = file("${project.projectDir}/src/main/arp-client")
 }
 
 
task npmInstallDependencies(type: NpmTask) {
   dependsOn 'npmSetup'
   execOverrides {
      it.ignoreExitValue = true
      it.workingDir = 'src/main/arp-client'
   }
   args = ['install']
}

task npmBuild(type: NpmTask) {
   dependsOn 'npmInstallDependencies'
   execOverrides {
      it.workingDir = 'src/main/arp-client'
   }
   args = ['run', 'build']
}

task npmStart(type: NpmTask) {
    dependsOn 'npmBuild'
    execOverrides {
        it.workingDir = 'src/main/arp-client'
    }
    args = ['start']
}
 
task copyMyapptoBuild(type: Copy) {
   dependsOn 'npmBuild'
   from "$projectDir/src/main/arp-client/build/"
   into "$buildDir/resources/main/static"
}
 
processResources {
   dependsOn 'copyMyapptoBuild'
}
